{"level":"info","message":"Cannot read properties of undefined (reading 'id')","service":"user-service"}
{"level":"info","message":"Cannot read properties of undefined (reading 'id')","service":"user-service"}
{"level":"info","message":"Login failed: jwt expired","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.findUnique()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:30:52\n\n  27 },\n  28 \n  29 findSession: async (session_id: number) => {\n→ 30     const session = await prisma.quiz_sessions.findUnique({\n           where: {\n         +   id: Int\n           }\n         })\n\nArgument `id` is missing.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.findFirst()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:30:52\n\n  27 },\n  28 \n  29 findSession: async (session_id: number) => {\n→ 30     const session = await prisma.quiz_sessions.findFirst({\n           where: {\n         +   id: {\n         +     equals: Int | IntFieldRefInput,\n         +     in: Int[] | ListIntFieldRefInput,\n         +     notIn: Int[] | ListIntFieldRefInput,\n         +     lt: Int | IntFieldRefInput,\n         +     lte: Int | IntFieldRefInput,\n         +     gt: Int | IntFieldRefInput,\n         +     gte: Int | IntFieldRefInput,\n         +     not: Int | NestedIntFilter\n         +   }\n           }\n         })\n\nArgument `id` is missing.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.findUnique()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:30:52\n\n  27 },\n  28 \n  29 findSession: async (session_id: number) => {\n→ 30     const session = await prisma.quiz_sessions.findUnique({\n           where: {\n         +   id: Int\n           }\n         })\n\nArgument `id` is missing.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.findUnique()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:30:52\n\n  27 },\n  28 \n  29 findSession: async (session_id: number) => {\n→ 30     const session = await prisma.quiz_sessions.findUnique({\n           where: {\n         +   id: Int\n           }\n         })\n\nArgument `id` is missing.","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session with id: 1 not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"Login failed: jwt expired","service":"user-service"}
{"level":"info","message":"Login failed: jwt expired","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"MusicQuiz session for user: Thibaux Swildens not found","service":"user-service"}
{"level":"info","message":"Login failed: jwt expired","service":"user-service"}
{"level":"info","message":"Login failed: jwt expired","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.create()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:20:49\n\n  17     },\n  18 };\n  19 \n→ 20 const quiz = await prisma.quiz_sessions.create({\n       data: {\n         host_user: {\n           connect: {\n             id: undefined,\n     ?       email?: String,\n     ?       AND?: usersWhereInput | usersWhereInput[],\n     ?       OR?: usersWhereInput[],\n     ?       NOT?: usersWhereInput | usersWhereInput[],\n     ?       uuid?: UuidFilter | String,\n     ?       name?: StringNullableFilter | String | Null,\n     ?       avatar?: StringNullableFilter | String | Null,\n     ?       spotify_id?: StringFilter | String,\n     ?       spotify_url?: StringNullableFilter | String | Null,\n     ?       updated_at?: DateTimeFilter | DateTime,\n     ?       created_at?: DateTimeFilter | DateTime,\n     ?       quizzes?: Quiz_sessionsListRelationFilter\n           }\n         },\n         type: \"intros\",\n         status: \"PENDING\",\n         hash: \"NY5FT\",\n         config: {\n           number_of_tracks: 9,\n           number_of_options: 4,\n           playlist_id: \"4BmIp9LV6bjaygjrUdJc0n\"\n         }\n       },\n       include: {\n         host_user: true\n       }\n     })\n\nArgument `connect` of type usersWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.create()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:20:49\n\n  17     },\n  18 };\n  19 \n→ 20 const quiz = await prisma.quiz_sessions.create({\n       data: {\n         host_user: {\n           connect: {\n             id: undefined,\n     ?       email?: String,\n     ?       AND?: usersWhereInput | usersWhereInput[],\n     ?       OR?: usersWhereInput[],\n     ?       NOT?: usersWhereInput | usersWhereInput[],\n     ?       uuid?: UuidFilter | String,\n     ?       name?: StringNullableFilter | String | Null,\n     ?       avatar?: StringNullableFilter | String | Null,\n     ?       spotify_id?: StringFilter | String,\n     ?       spotify_url?: StringNullableFilter | String | Null,\n     ?       updated_at?: DateTimeFilter | DateTime,\n     ?       created_at?: DateTimeFilter | DateTime,\n     ?       quizzes?: Quiz_sessionsListRelationFilter\n           }\n         },\n         type: \"intros\",\n         status: \"PENDING\",\n         hash: \"DSHQP\",\n         config: {\n           number_of_tracks: 9,\n           number_of_options: 4,\n           playlist_id: \"4BmIp9LV6bjaygjrUdJc0n\"\n         }\n       }\n     })\n\nArgument `connect` of type usersWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.create()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:21:49\n\n  18     },\n  19 };\n  20 \n→ 21 const quiz = await prisma.quiz_sessions.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'users' record(s) (needed to inline the relation on 'quiz_sessions' record(s)) was found for a nested connect on one-to-many relation 'quiz_sessionsTousers'.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.create()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:21:49\n\n  18     },\n  19 };\n  20 \n→ 21 const quiz = await prisma.quiz_sessions.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'users' record(s) (needed to inline the relation on 'quiz_sessions' record(s)) was found for a nested connect on one-to-many relation 'quiz_sessionsTousers'.","service":"user-service"}
{"level":"info","message":"\nInvalid `prisma.quiz_sessions.create()` invocation in\n/Users/thibauxswildens/Documents/Projects/Freestyle-friday/music-quiz/apps/backend/src/MusicQuiz/Sessions/QuizSessions/QuizSessionService.ts:23:49\n\n  20     },\n  21 };\n  22 \n→ 23 const quiz = await prisma.quiz_sessions.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'users' record(s) (needed to inline the relation on 'quiz_sessions' record(s)) was found for a nested connect on one-to-many relation 'quiz_sessionsTousers'.","service":"user-service"}
{"level":"info","message":"Invalid URL","service":"user-service"}
{"level":"info","message":"Invalid URL","service":"user-service"}
{"level":"info","message":"playlist.map is not a function","service":"user-service"}
{"level":"info","message":"playlist.map is not a function","service":"user-service"}
{"level":"info","message":"Request failed with status code 400","service":"user-service"}
{"level":"info","message":"playlist.map is not a function","service":"user-service"}
{"level":"info","message":"playlist.map is not a function","service":"user-service"}
{"level":"info","message":"Cannot read properties of undefined (reading 'map')","service":"user-service"}
{"level":"info","message":"playlist.tracks.map is not a function","service":"user-service"}
{"level":"info","message":"playlist.tracks.map is not a function","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Request failed with status code 401","service":"user-service"}
{"level":"info","message":"Cannot read properties of undefined (reading 'spotify')","service":"user-service"}
{"level":"info","message":"Cannot read properties of undefined (reading 'spotify')","service":"user-service"}
{"level":"info","message":"Cannot read properties of undefined (reading 'spotify')","service":"user-service"}
